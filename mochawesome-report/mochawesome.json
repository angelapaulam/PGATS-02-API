{
  "stats": {
    "suites": 4,
    "tests": 6,
    "passes": 0,
    "pending": 0,
    "failures": 6,
    "start": "2025-08-24T21:33:51.966Z",
    "end": "2025-08-24T21:33:52.164Z",
    "duration": 198,
    "testsRegistered": 6,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "917dfe77-3e82-4bff-94f8-6f9d3f25fdef",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5cdd2112-a45f-4597-95a1-c5de9118048b",
          "title": "Transfer Controller",
          "fullFile": "C:\\Users\\Suporte\\posautomacao\\pgats-02-api\\test\\controller\\transferController.test.js",
          "file": "\\test\\controller\\transferController.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4b904cf2-3a3d-4f70-9ce6-29b1751d2e2a",
              "title": "POST /transfers",
              "fullFile": "C:\\Users\\Suporte\\posautomacao\\pgats-02-api\\test\\controller\\transferController.test.js",
              "file": "\\test\\controller\\transferController.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Quando informo remetente e destinatario inexistentes recebo 400",
                  "fullTitle": "Transfer Controller POST /transfers Quando informo remetente e destinatario inexistentes recebo 400",
                  "timedOut": false,
                  "duration": 85,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request(app)\n    .post('/transfers')\n    .send({\n        from: \"julio\",\n        to: \"priscila\",\n        value: 100\n    });\n\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property('error', 'Usuário remetente ou destinatário não encontrado')",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test\\controller\\transferController.test.js:24:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "94a70bac-dd83-4d95-8759-cf6e4cfa4e6b",
                  "parentUUID": "4b904cf2-3a3d-4f70-9ce6-29b1751d2e2a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Usando Mocks: Quando informo remetente e destinatario inexistentes recebo 400",
                  "fullTitle": "Transfer Controller POST /transfers Usando Mocks: Quando informo remetente e destinatario inexistentes recebo 400",
                  "timedOut": false,
                  "duration": 19,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Mocar apenas a função transfer do Service\nconst transferServiceMock = sinon.stub(transferService, 'transfer');\ntransferServiceMock.throws(new Error('Usuário remetente ou destinatário não encontrado'));\nconst resposta = await request(app)\n    .post('/transfers')\n    .send({\n        from: \"julio\",\n        to: \"priscila\",\n        value: 100\n    });\n\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property('error', 'Usuário remetente ou destinatário não encontrado')\n// Reseto o Mock\nsinon.restore();",
                  "err": {
                    "message": "AssertionError: expected 401 to equal 400",
                    "estack": "AssertionError: expected 401 to equal 400\n    at Context.<anonymous> (test\\controller\\transferController.test.js:41:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)",
                    "diff": "- 401\n+ 400\n"
                  },
                  "uuid": "aeb6a977-69e2-43ab-9b8a-143ccf80af17",
                  "parentUUID": "4b904cf2-3a3d-4f70-9ce6-29b1751d2e2a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Usando Mocks: Quando informo valores válidos eu tenho sucesso com 201 CREATED",
                  "fullTitle": "Transfer Controller POST /transfers Usando Mocks: Quando informo valores válidos eu tenho sucesso com 201 CREATED",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Mocar apenas a função transfer do Service\nconst transferServiceMock = sinon.stub(transferService, 'transfer');\ntransferServiceMock.returns({ \n    from: \"julio\", \n    to: \"priscila\", \n    value: 100, \n    date: new Date().toISOString() \n});\nconst resposta = await request(app)\n    .post('/transfers')\n    .send({\n        from: \"julio\",\n        to: \"priscila\",\n        value: 100\n    });\n\nexpect(resposta.status).to.equal(201);\n//validação com um Fixture\nconst respostaEsperada = require('../fixture/respostas/quandoInformoValoresValidosEuTenhosucesso')\ndelete resposta.body.date;\ndelete respostaEsperada.date;\nexpect(resposta.body).to.deep.equal(respostaEsperada);\n        \n//pect(resposta.body).to.have.property('from', 'julio');\n//pect(resposta.body).to.have.property('to', 'priscila');\n//pect(resposta.body).to.have.property('value', 100);\n// Reseto o Mock\nsinon.restore();",
                  "err": {
                    "message": "TypeError: Attempted to wrap transfer which is already wrapped",
                    "estack": "TypeError: Attempted to wrap transfer which is already wrapped\n    at checkWrappedMethod (node_modules\\sinon\\lib\\sinon\\util\\core\\wrap-method.js:67:21)\n    at wrapMethod (node_modules\\sinon\\lib\\sinon\\util\\core\\wrap-method.js:132:13)\n    at Function.stub (node_modules\\sinon\\lib\\sinon\\stub.js:130:44)\n    at Sandbox.stub (node_modules\\sinon\\lib\\sinon\\sandbox.js:436:39)\n    at Context.<anonymous> (test\\controller\\transferController.test.js:50:47)\n    at process.processImmediate (node:internal/timers:491:21)\n--------------\nError: Stack Trace for original\n    at extendObjectWithWrappedMethods (node_modules\\sinon\\lib\\sinon\\util\\core\\wrap-method.js:173:34)\n    at wrapMethod (node_modules\\sinon\\lib\\sinon\\util\\core\\wrap-method.js:161:5)\n    at Function.stub (node_modules\\sinon\\lib\\sinon\\stub.js:130:44)\n    at Sandbox.stub (node_modules\\sinon\\lib\\sinon\\sandbox.js:436:39)\n    at Context.<anonymous> (test\\controller\\transferController.test.js:30:47)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "f35ddbb0-bc53-447d-bce8-25a9bfb32932",
                  "parentUUID": "4b904cf2-3a3d-4f70-9ce6-29b1751d2e2a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "94a70bac-dd83-4d95-8759-cf6e4cfa4e6b",
                "aeb6a977-69e2-43ab-9b8a-143ccf80af17",
                "f35ddbb0-bc53-447d-bce8-25a9bfb32932"
              ],
              "pending": [],
              "skipped": [],
              "duration": 106,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "85b3395e-51fd-4fdb-9d86-d7053f82e245",
          "title": "Transfer Controller",
          "fullFile": "C:\\Users\\Suporte\\posautomacao\\pgats-02-api\\test\\external\\transferExternal.test.js",
          "file": "\\test\\external\\transferExternal.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "5afbb5de-cada-4f97-8839-53ad65079e09",
              "title": "POST /transfers",
              "fullFile": "C:\\Users\\Suporte\\posautomacao\\pgats-02-api\\test\\external\\transferExternal.test.js",
              "file": "\\test\\external\\transferExternal.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Quando informo remetente e destinatario inexistentes recebo 400",
                  "fullTitle": "Transfer Controller POST /transfers Quando informo remetente e destinatario inexistentes recebo 400",
                  "timedOut": false,
                  "duration": 41,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "const resposta = await request('http://localhost:3000')\n    .post('/transfers')\n    .send({\n        from: \"julio\",\n        to: \"priscila\",\n        value: 100\n    });\n\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property('error', 'Usuário remetente ou destinatário não encontrado')",
                  "err": {
                    "message": "AggregateError [ECONNREFUSED]: ",
                    "estack": "AggregateError [ECONNREFUSED]: \n    at internalConnectMultiple (node:net:1139:18)\n    at afterConnectMultiple (node:net:1712:7)",
                    "diff": null
                  },
                  "uuid": "41031f40-b974-4668-8914-294be016d786",
                  "parentUUID": "5afbb5de-cada-4f97-8839-53ad65079e09",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Usando Mocks: Quando informo remetente e destinatario inexistentes recebo 400",
                  "fullTitle": "Transfer Controller POST /transfers Usando Mocks: Quando informo remetente e destinatario inexistentes recebo 400",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Mocar apenas a função transfer do Service\nconst transferServiceMock = sinon.stub(transferService, 'transfer');\ntransferServiceMock.throws(new Error('Usuário remetente ou destinatário não encontrado'));\nconst resposta = await request(app)\n    .post('/transfers')\n    .send({\n        from: \"julio\",\n        to: \"priscila\",\n        value: 100\n    });\n\nexpect(resposta.status).to.equal(400);\nexpect(resposta.body).to.have.property('error', 'Usuário remetente ou destinatário não encontrado')\n// Reseto o Mock\nsinon.restore();",
                  "err": {
                    "message": "TypeError: Attempted to wrap transfer which is already wrapped",
                    "estack": "TypeError: Attempted to wrap transfer which is already wrapped\n    at checkWrappedMethod (node_modules\\sinon\\lib\\sinon\\util\\core\\wrap-method.js:67:21)\n    at wrapMethod (node_modules\\sinon\\lib\\sinon\\util\\core\\wrap-method.js:132:13)\n    at Function.stub (node_modules\\sinon\\lib\\sinon\\stub.js:130:44)\n    at Sandbox.stub (node_modules\\sinon\\lib\\sinon\\sandbox.js:436:39)\n    at Context.<anonymous> (test\\external\\transferExternal.test.js:30:47)\n    at process.processImmediate (node:internal/timers:491:21)\n--------------\nError: Stack Trace for original\n    at extendObjectWithWrappedMethods (node_modules\\sinon\\lib\\sinon\\util\\core\\wrap-method.js:173:34)\n    at wrapMethod (node_modules\\sinon\\lib\\sinon\\util\\core\\wrap-method.js:161:5)\n    at Function.stub (node_modules\\sinon\\lib\\sinon\\stub.js:130:44)\n    at Sandbox.stub (node_modules\\sinon\\lib\\sinon\\sandbox.js:436:39)\n    at Context.<anonymous> (test\\controller\\transferController.test.js:30:47)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "9c4a0ab3-8eeb-4916-881e-adf8c59a5b57",
                  "parentUUID": "5afbb5de-cada-4f97-8839-53ad65079e09",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Usando Mocks: Quando informo valores válidos eu tenho sucesso com 201 CREATED",
                  "fullTitle": "Transfer Controller POST /transfers Usando Mocks: Quando informo valores válidos eu tenho sucesso com 201 CREATED",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Mocar apenas a função transfer do Service\nconst transferServiceMock = sinon.stub(transferService, 'transfer');\ntransferServiceMock.returns({ \n    from: \"julio\", \n    to: \"priscila\", \n    value: 100, \n    date: new Date().toISOString() \n});\nconst resposta = await request(app)\n    .post('/transfers')\n    .send({\n        from: \"julio\",\n        to: \"priscila\",\n        value: 100\n    });\n\nexpect(resposta.status).to.equal(201);\nexpect(resposta.body).to.have.property('from', 'julio');\nexpect(resposta.body).to.have.property('to', 'priscila');\nexpect(resposta.body).to.have.property('value', 100);\n// Reseto o Mock\nsinon.restore();",
                  "err": {
                    "message": "TypeError: Attempted to wrap transfer which is already wrapped",
                    "estack": "TypeError: Attempted to wrap transfer which is already wrapped\n    at checkWrappedMethod (node_modules\\sinon\\lib\\sinon\\util\\core\\wrap-method.js:67:21)\n    at wrapMethod (node_modules\\sinon\\lib\\sinon\\util\\core\\wrap-method.js:132:13)\n    at Function.stub (node_modules\\sinon\\lib\\sinon\\stub.js:130:44)\n    at Sandbox.stub (node_modules\\sinon\\lib\\sinon\\sandbox.js:436:39)\n    at Context.<anonymous> (test\\external\\transferExternal.test.js:50:47)\n    at process.processImmediate (node:internal/timers:491:21)\n--------------\nError: Stack Trace for original\n    at extendObjectWithWrappedMethods (node_modules\\sinon\\lib\\sinon\\util\\core\\wrap-method.js:173:34)\n    at wrapMethod (node_modules\\sinon\\lib\\sinon\\util\\core\\wrap-method.js:161:5)\n    at Function.stub (node_modules\\sinon\\lib\\sinon\\stub.js:130:44)\n    at Sandbox.stub (node_modules\\sinon\\lib\\sinon\\sandbox.js:436:39)\n    at Context.<anonymous> (test\\controller\\transferController.test.js:30:47)\n    at process.processImmediate (node:internal/timers:491:21)",
                    "diff": null
                  },
                  "uuid": "069f5537-9f49-4e23-846e-c56bc2aa739d",
                  "parentUUID": "5afbb5de-cada-4f97-8839-53ad65079e09",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "41031f40-b974-4668-8914-294be016d786",
                "9c4a0ab3-8eeb-4916-881e-adf8c59a5b57",
                "069f5537-9f49-4e23-846e-c56bc2aa739d"
              ],
              "pending": [],
              "skipped": [],
              "duration": 44,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}